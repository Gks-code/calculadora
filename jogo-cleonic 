<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>2048 Game</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #faf8ef;
            margin: 0;
            padding: 20px;
        }
        
        h1 {
            font-size: 40px;
            margin: 0;
            color: #776e65;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            width: 450px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .scores {
            display: flex;
            gap: 10px;
        }
        
        .score-container {
            background: #bbada0;
            padding: 5px 15px;
            border-radius: 5px;
            color: white;
            font-weight: bold;
            text-align: center;
            min-width: 60px;
        }
        
        .score-title {
            font-size: 14px;
        }
        
        .score-value {
            font-size: 20px;
        }
        
        .game-container {
            width: 450px;
            height: 450px;
            background-color: #bbada0;
            border-radius: 6px;
            margin: 0 auto;
            padding: 15px;
            box-sizing: border-box;
            position: relative;
            touch-action: none;
        }
        
        .grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-template-rows: repeat(4, 1fr);
            gap: 15px;
            width: 100%;
            height: 100%;
        }
        
        .cell {
            background-color: #cdc1b4;
            border-radius: 5px;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 35px;
            font-weight: bold;
            color: #776e65;
            transition: all 0.15s ease;
        }
        
        .tile-2 { background-color: #eee4da; }
        .tile-4 { background-color: #ede0c8; }
        .tile-8 { background-color: #f2b179; color: white; }
        .tile-16 { background-color: #f59563; color: white; }
        .tile-32 { background-color: #f67c5f; color: white; }
        .tile-64 { background-color: #f65e3b; color: white; }
        .tile-128 { background-color: #edcf72; color: white; font-size: 30px; }
        .tile-256 { background-color: #edcc61; color: white; font-size: 30px; }
        .tile-512 { background-color: #edc850; color: white; font-size: 30px; }
        .tile-1024 { background-color: #edc53f; color: white; font-size: 25px; }
        .tile-2048 { background-color: #edc22e; color: white; font-size: 25px; }
        
        .game-over {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(238, 228, 218, 0.73);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
            z-index: 100;
            display: none;
        }
        
        .game-over-text {
            font-size: 60px;
            font-weight: bold;
            color: #776e65;
            margin-bottom: 30px;
        }
        
        button {
            background-color: #8f7a66;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 10px 20px;
            font-size: 18px;
            cursor: pointer;
        }
        
        button:hover {
            background-color: #9f8b77;
        }
        
        .instructions {
            margin-top: 20px;
            color: #776e65;
            width: 450px;
            margin-left: auto;
            margin-right: auto;
        }

        @media (max-width: 500px) {
            .header, .game-container, .instructions {
                width: 90vw;
            }
            
            .game-container {
                height: 90vw;
                padding: 10px;
            }
            
            .cell {
                font-size: 6vw;
            }
            
            .tile-128, .tile-256, .tile-512 {
                font-size: 5vw;
            }
            
            .tile-1024, .tile-2048 {
                font-size: 4vw;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>2048</h1>
        <div class="scores">
            <div class="score-container">
                <div class="score-title">SCORE</div>
                <div class="score-value" id="score">0</div>
            </div>
            <div class="score-container">
                <div class="score-title">BEST</div>
                <div class="score-value" id="high-score">0</div>
            </div>
        </div>
    </div>
    
    <div class="game-container">
        <div class="grid" id="grid"></div>
        <div class="game-over" id="game-over">
            <div class="game-over-text">Game Over!</div>
            <button onclick="startGame()">Try Again</button>
        </div>
    </div>
    
    <div class="instructions">
        <p>Use as setas do teclado ou deslize na tela para mover os blocos. Quando dois blocos iguais se tocam, eles se fundem!</p>
    </div>

    <script>
        const grid = document.getElementById('grid');
        const scoreDisplay = document.getElementById('score');
        const highScoreDisplay = document.getElementById('high-score');
        const gameOverDisplay = document.getElementById('game-over');
        
        let board = [];
        let score = 0;
        let highScore = localStorage.getItem('2048-highScore') || 0;
        let gameOver = false;
        let touchStartX, touchStartY;
        
        // Inicializa o tabuleiro
        function initializeBoard() {
            board = [
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0]
            ];
            
            score = 0;
            gameOver = false;
            gameOverDisplay.style.display = 'none';
            
            // Cria as células vazias
            grid.innerHTML = '';
            for (let i = 0; i < 16; i++) {
                const cell = document.createElement('div');
                cell.classList.add('cell');
                grid.appendChild(cell);
            }
            
            // Adiciona 2 blocos iniciais
            addRandomTile();
            addRandomTile();
            
            updateBoard();
            highScoreDisplay.textContent = highScore;
        }
        
        // Atualiza a exibição do tabuleiro
        function updateBoard() {
            const cells = document.querySelectorAll('.cell');
            
            for (let row = 0; row < 4; row++) {
                for (let col = 0; col < 4; col++) {
                    const index = row * 4 + col;
                    const value = board[row][col];
                    
                    cells[index].className = 'cell';
                    cells[index].textContent = '';
                    
                    if (value > 0) {
                        cells[index].textContent = value;
                        cells[index].classList.add(`tile-${value}`);
                    }
                }
            }
            
            scoreDisplay.textContent = score;
            
            // Atualiza a pontuação máxima
            if (score > highScore) {
                highScore = score;
                localStorage.setItem('2048-highScore', highScore);
                highScoreDisplay.textContent = highScore;
            }
            
            // Verifica se o jogo acabou
            if (isGameOver()) {
                gameOver = true;
                gameOverDisplay.style.display = 'flex';
            }
        }
        
        // Adiciona um bloco aleatório (2 ou 4) em uma posição vazia
        function addRandomTile() {
            if (gameOver) return;
            
            const emptyCells = [];
            
            for (let row = 0; row < 4; row++) {
                for (let col = 0; col < 4; col++) {
                    if (board[row][col] === 0) {
                        emptyCells.push({ row, col });
                    }
                }
            }
            
            if (emptyCells.length > 0) {
                const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)];
                board[randomCell.row][randomCell.col] = Math.random() < 0.9 ? 2 : 4;
                return true;
            }
            return false;
        }
        
        // Move os blocos para a esquerda
        function moveLeft() {
            let moved = false;
            
            for (let row = 0; row < 4; row++) {
                // Remove zeros e junta números iguais
                const newRow = [];
                let previous = null;
                let merged = false;
                
                for (let col = 0; col < 4; col++) {
                    if (board[row][col] !== 0) {
                        if (previous === null) {
                            previous = board[row][col];
                        } else if (previous === board[row][col] && !merged) {
                            newRow.push(previous * 2);
                            score += previous * 2;
                            previous = null;
                            moved = true;
                            merged = true;
                        } else {
                            newRow.push(previous);
                            previous = board[row][col];
                            merged = false;
                            if (newRow.length - 1 !== col) moved = true;
                        }
                    }
                }
                
                if (previous !== null) {
                    newRow.push(previous);
                }
                
                // Preenche com zeros no final
                while (newRow.length < 4) {
                    newRow.push(0);
                }
                
                // Atualiza a linha
                for (let col = 0; col < 4; col++) {
                    if (board[row][col] !== newRow[col]) {
                        moved = true;
                    }
                    board[row][col] = newRow[col];
                }
            }
            
            return moved;
        }
        
        // Move os blocos para a direita
        function moveRight() {
            let moved = false;
            
            for (let row = 0; row < 4; row++) {
                const newRow = [];
                let previous = null;
                let merged = false;
                
                for (let col = 3; col >= 0; col--) {
                    if (board[row][col] !== 0) {
                        if (previous === null) {
                            previous = board[row][col];
                        } else if (previous === board[row][col] && !merged) {
                            newRow.unshift(previous * 2);
                            score += previous * 2;
                            previous = null;
                            moved = true;
                            merged = true;
                        } else {
                            newRow.unshift(previous);
                            previous = board[row][col];
                            merged = false;
                            if (3 - newRow.length !== col) moved = true;
                        }
                    }
                }
                
                if (previous !== null) {
                    newRow.unshift(previous);
                }
                
                while (newRow.length < 4) {
                    newRow.unshift(0);
                }
                
                for (let col = 0; col < 4; col++) {
                    if (board[row][col] !== newRow[col]) {
                        moved = true;
                    }
                    board[row][col] = newRow[col];
                }
            }
            
            return moved;
        }
        
        // Move os blocos para cima
        function moveUp() {
            let moved = false;
            
            for (let col = 0; col < 4; col++) {
                const newCol = [];
                let previous = null;
                let merged = false;
                
                for (let row = 0; row < 4; row++) {
                    if (board[row][col] !== 0) {
                        if (previous === null) {
                            previous = board[row][col];
                        } else if (previous === board[row][col] && !merged) {
                            newCol.push(previous * 2);
                            score += previous * 2;
                            previous = null;
                            moved = true;
                            merged = true;
                        } else {
                            newCol.push(previous);
                            previous = board[row][col];
                            merged = false;
                            if (newCol.length - 1 !== row) moved = true;
                        }
                    }
                }
                
                if (previous !== null) {
                    newCol.push(previous);
                }
                
                while (newCol.length < 4) {
                    newCol.push(0);
                }
                
                for (let row = 0; row < 4; row++) {
                    if (board[row][col] !== newCol[row]) {
                        moved = true;
                    }
                    board[row][col] = newCol[row];
                }
            }
            
            return moved;
        }
        
        // Move os blocos para baixo
        function moveDown() {
            let moved = false;
            
            for (let col = 0; col < 4; col++) {
                const newCol = [];
                let previous = null;
                let merged = false;
                
                for (let row = 3; row >= 0; row--) {
                    if (board[row][col] !== 0) {
                        if (previous === null) {
                            previous = board[row][col];
                        } else if (previous === board[row][col] && !merged) {
                            newCol.unshift(previous * 2);
                            score += previous * 2;
                            previous = null;
                            moved = true;
                            merged = true;
                        } else {
                            newCol.unshift(previous);
                            previous = board[row][col];
                            merged = false;
                            if (3 - newCol.length !== row) moved = true;
                        }
                    }
                }
                
                if (previous !== null) {
                    newCol.unshift(previous);
                }
                
                while (newCol.length < 4) {
                    newCol.unshift(0);
                }
                
                for (let row = 0; row < 4; row++) {
                    if (board[row][col] !== newCol[row]) {
                        moved = true;
                    }
                    board[row][col] = newCol[row];
                }
            }
            
            return moved;
        }
        
        // Verifica se o jogo acabou (sem movimentos possíveis)
        function isGameOver() {
            // Verifica espaços vazios
            for (let row = 0; row < 4; row++) {
                for (let col = 0; col < 4; col++) {
                    if (board[row][col] === 0) {
                        return false;
                    }
                }
            }
            
            // Verifica combinações horizontais
            for (let row = 0; row < 4; row++) {
                for (let col = 0; col < 3; col++) {
                    if (board[row][col] === board[row][col + 1]) {
                        return false;
                    }
                }
            }
            
            // Verifica combinações verticais
            for (let col = 0; col < 4; col++) {
                for (let row = 0; row < 3; row++) {
                    if (board[row][col] === board[row + 1][col]) {
                        return false;
                    }
                }
            }
            
            return true;
        }
        
        // Inicia um novo jogo
        function startGame() {
            initializeBoard();
        }
        
        // Event listeners para teclado
        document.addEventListener('keydown', function(event) {
            if (gameOver) return;
            
            let moved = false;
            
            switch(event.key) {
                case 'ArrowLeft':
                    moved = moveLeft();
                    break;
                case 'ArrowRight':
                    moved = moveRight();
                    break;
                case 'ArrowUp':
                    moved = moveUp();
                    break;
                case 'ArrowDown':
                    moved = moveDown();
                    break;
                default:
                    return;
            }
            
            if (moved) {
                addRandomTile();
                updateBoard();
            }
        });
        
        // Event listeners para touch (mobile)
        grid.addEventListener('touchstart', function(e) {
            touchStartX = e.touches[0].clientX;
            touchStartY = e.touches[0].clientY;
        }, { passive: false });
        
        grid.addEventListener('touchend', function(e) {
            if (!touchStartX || !touchStartY || gameOver) return;
            
            const touchEndX = e.changedTouches[0].clientX;
            const touchEndY = e.changedTouches[0].clientY;
            const dx = touchEndX - touchStartX;
            const dy = touchEndY - touchStartY;
            
            // Determina a direção baseada no maior movimento
            if (Math.abs(dx) > Math.abs(dy)) {
                if (dx > 50) {
                    if (moveRight()) {
                        addRandomTile();
                        updateBoard();
                    }
                } else if (dx < -50) {
                    if (moveLeft()) {
                        addRandomTile();
                        updateBoard();
                    }
                }
            } else {
                if (dy > 50) {
                    if (moveDown()) {
                        addRandomTile();
                        updateBoard();
                    }
                } else if (dy < -50) {
                    if (moveUp()) {
                        addRandomTile();
                        updateBoard();
                    }
                }
            }
            
            touchStartX = null;
            touchStartY = null;
        }, { passive: false });
        
        // Inicia o jogo quando a página carrega
        startGame();
    </script>
</body>
</html>